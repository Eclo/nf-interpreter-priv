set(CMAKE_C_FLAGS "-mthumb -fno-builtin -mcpu=cortex-m7 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -Wall -std=c11 -w -ffunction-sections -fdata-sections -fomit-frame-pointer -mlong-calls -fdollars-in-identifiers -mabi=aapcs -fno-exceptions -fno-unroll-loops -mstructure-size-boundary=8 -ffast-math -ftree-vectorize -specs=nano.specs" CACHE INTERNAL "c compiler flags")
set(CMAKE_CXX_FLAGS "-mthumb -fno-builtin -mcpu=cortex-m7 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -Wall -std=c++11 -w -fcheck-new -fno-rtti  -fno-use-cxa-atexit -fno-threadsafe-statics -ffunction-sections -fdata-sections -fomit-frame-pointer -mlong-calls -fdollars-in-identifiers -mabi=aapcs -fno-exceptions -fno-unroll-loops -mstructure-size-boundary=8 -ffast-math -ftree-vectorize -specs=nano.specs" CACHE INTERNAL "cxx compiler flags")
set(CMAKE_ASM_FLAGS "-mthumb -mcpu=cortex-m7 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -x assembler-with-cpp" CACHE INTERNAL "asm compiler flags")

set(CMAKE_EXE_LINKER_FLAGS "-Wl,--gc-sections -mthumb -mcpu=cortex-m7 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -mabi=aapcs" CACHE INTERNAL "executable linker flags")
set(CMAKE_MODULE_LINKER_FLAGS "-mthumb -mcpu=cortex-m7 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -mabi=aapcs" CACHE INTERNAL "module linker flags")
set(CMAKE_SHARED_LINKER_FLAGS "-mthumb -mcpu=cortex-m7 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -mabi=aapcs" CACHE INTERNAL "shared linker flags")
set(STM32_CHIP_TYPES 722xx 723xx 745xx 765xx 746xx 756xx 767xx 777xx 778xx 769xx 779xx CACHE INTERNAL "stm32f7 chip types")
set(STM32_CODES "722.." "723.." "745.." "765.." "746.." "756.." "767.." "777.." "778.." "769.." "779..")


macro(STM32_GET_CHIP_TYPE CHIP CHIP_TYPE)
    string(REGEX REPLACE "^[S][T][M]32[F](7[24567][2356789].[VZIRNBA]).*$" "\\1" STM32_CODE ${CHIP})
    set(INDEX 0)
    foreach(C_TYPE ${STM32_CHIP_TYPES})
        list(GET STM32_CODES ${INDEX} CHIP_TYPE_REGEXP)
        if(STM32_CODE MATCHES ${CHIP_TYPE_REGEXP})
            set(RESULT_TYPE ${C_TYPE})
        endif()
        math(EXPR INDEX "${INDEX}+1")
    endforeach()
    set(${CHIP_TYPE} ${RESULT_TYPE})
endmacro()

macro(STM32_GET_CHIP_PARAMETERS CHIP FLASH_SIZE RAM_SIZE)
    string(REGEX REPLACE "^[S][T][M]32[F](7[24567][2356789].[VZIRNBA]).*$" "\\1" STM32_CODE ${CHIP})
	string(REGEX REPLACE "^[S][T][M]32[F]7[24567][2356789].([EGI]).*$" "\\1" STM32_SIZE_CODE ${CHIP})
    
    if(STM32_SIZE_CODE STREQUAL "E")
        set(FLASH "512K")
    elseif(STM32_SIZE_CODE STREQUAL "G")
        set(FLASH "1024K")
    elseif(STM32_SIZE_CODE STREQUAL "I")
        set(FLASH "2048K")
    endif()
    
    STM32_GET_CHIP_TYPE(${CHIP} TYPE)
    
    if(${TYPE} STREQUAL "722xx")
        set(RAM "256K")
    elseif(${TYPE} STREQUAL "723xx")
        set(RAM "256K")
    elseif(${TYPE} STREQUAL "745xx")
        set(RAM "320K")
    elseif(${TYPE} STREQUAL "765xx")
        set(RAM "512K")
    elseif(${TYPE} STREQUAL "746xx")
        set(RAM "320K")
    elseif(${TYPE} STREQUAL "756xx")
        set(RAM "320K")
    elseif(${TYPE} STREQUAL "767xx")
        set(RAM "512K")
    elseif(${TYPE} STREQUAL "777xx")
        set(RAM "512K")
    elseif(${TYPE} STREQUAL "778xx")
        set(RAM "512K")
    elseif(${TYPE} STREQUAL "769xx")
        set(RAM "512K")
    elseif(${TYPE} STREQUAL "779xx")
        set(RAM "512K")
    endif()
    
    set(${FLASH_SIZE} ${FLASH})
    set(${RAM_SIZE} ${RAM})
endmacro()

function(STM32_SET_CHIP_DEFINITIONS TARGET CHIP_TYPE)
    list(FIND STM32_CHIP_TYPES ${CHIP_TYPE} TYPE_INDEX)
    if(TYPE_INDEX EQUAL -1)
        MESSAGE(FATAL_ERROR "${CHIP_TYPE} is not supported.")
    endif()
    get_target_property(TARGET_DEFS ${TARGET} COMPILE_DEFINITIONS)
    
    if(TARGET_DEFS)
        set(TARGET_DEFS "STM32F7;STM32F${CHIP_TYPE};${TARGET_DEFS}")
    else()
        set(TARGET_DEFS "STM32F7;STM32F${CHIP_TYPE}")
    endif()
        
    set_target_properties(${TARGET} PROPERTIES COMPILE_DEFINITIONS "${TARGET_DEFS}")
endfunction()
